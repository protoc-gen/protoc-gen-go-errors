// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package main

import (
	context "context"
	errors1 "errors"
	fmt "fmt"
	errors "github.com/protoc-gen/protoc-gen-go-errors/errors"
)

func As(err error) *errors.Error {
	if err == nil {
		return nil
	}
	var e *errors.Error
	if errors1.As(err, &e) {
		return e
	}
	return nil
}

func New(code int, reason, message string) *errors.Error {
	return errors.New(code, reason, message)
}

func IsBadRequest(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ClientError_BAD_REQUEST.String() && e.Code == 400
}

func ErrorBadRequest() *errors.Error {
	return errors.New(400, ClientError_BAD_REQUEST.String(), "")
}

func ErrorBadRequestWithMessage(format string, params ...any) *errors.Error {
	return errors.New(400, ClientError_BAD_REQUEST.String(), fmt.Sprintf(format, params...))
}

func ErrorBadRequestWithContext(ctx context.Context, params ...any) *errors.Error {
	if len(params) == 0 {
		return errors.New(400, ClientError_BAD_REQUEST.String(), "")
	}
	return errors.NewWithContext(ctx, 400, ClientError_BAD_REQUEST.String(), params)
}

func IsUserNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ClientError_USER_NOT_FOUND.String() && e.Code == 400
}

func ErrorUserNotFound() *errors.Error {
	return errors.New(400, ClientError_USER_NOT_FOUND.String(), "")
}

func ErrorUserNotFoundWithMessage(format string, params ...any) *errors.Error {
	return errors.New(400, ClientError_USER_NOT_FOUND.String(), fmt.Sprintf(format, params...))
}

func ErrorUserNotFoundWithContext(ctx context.Context, params ...any) *errors.Error {
	if len(params) == 0 {
		return errors.New(400, ClientError_USER_NOT_FOUND.String(), "")
	}
	return errors.NewWithContext(ctx, 400, ClientError_USER_NOT_FOUND.String(), params)
}

func IsUserAlreadyExists(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ClientError_USER_ALREADY_EXISTS.String() && e.Code == 400
}

func ErrorUserAlreadyExists() *errors.Error {
	return errors.New(400, ClientError_USER_ALREADY_EXISTS.String(), "")
}

func ErrorUserAlreadyExistsWithMessage(format string, params ...any) *errors.Error {
	return errors.New(400, ClientError_USER_ALREADY_EXISTS.String(), fmt.Sprintf(format, params...))
}

func ErrorUserAlreadyExistsWithContext(ctx context.Context, params ...any) *errors.Error {
	if len(params) == 0 {
		return errors.New(400, ClientError_USER_ALREADY_EXISTS.String(), "")
	}
	return errors.NewWithContext(ctx, 400, ClientError_USER_ALREADY_EXISTS.String(), params)
}

func IsInvalidEmailOrPassword(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ClientError_INVALID_EMAIL_OR_PASSWORD.String() && e.Code == 400
}

func ErrorInvalidEmailOrPassword() *errors.Error {
	return errors.New(400, ClientError_INVALID_EMAIL_OR_PASSWORD.String(), "")
}

func ErrorInvalidEmailOrPasswordWithMessage(format string, params ...any) *errors.Error {
	return errors.New(400, ClientError_INVALID_EMAIL_OR_PASSWORD.String(), fmt.Sprintf(format, params...))
}

func ErrorInvalidEmailOrPasswordWithContext(ctx context.Context, params ...any) *errors.Error {
	if len(params) == 0 {
		return errors.New(400, ClientError_INVALID_EMAIL_OR_PASSWORD.String(), "")
	}
	return errors.NewWithContext(ctx, 400, ClientError_INVALID_EMAIL_OR_PASSWORD.String(), params)
}

func IsProviderNotSupported(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ClientError_PROVIDER_NOT_SUPPORTED.String() && e.Code == 400
}

func ErrorProviderNotSupported() *errors.Error {
	return errors.New(400, ClientError_PROVIDER_NOT_SUPPORTED.String(), "")
}

func ErrorProviderNotSupportedWithMessage(format string, params ...any) *errors.Error {
	return errors.New(400, ClientError_PROVIDER_NOT_SUPPORTED.String(), fmt.Sprintf(format, params...))
}

func ErrorProviderNotSupportedWithContext(ctx context.Context, params ...any) *errors.Error {
	if len(params) == 0 {
		return errors.New(400, ClientError_PROVIDER_NOT_SUPPORTED.String(), "")
	}
	return errors.NewWithContext(ctx, 400, ClientError_PROVIDER_NOT_SUPPORTED.String(), params)
}

func IsUnauthorized(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UnauthorizedError_UNAUTHORIZED.String() && e.Code == 401
}

func ErrorUnauthorized() *errors.Error {
	return errors.New(401, UnauthorizedError_UNAUTHORIZED.String(), "")
}

func ErrorUnauthorizedWithMessage(format string, params ...any) *errors.Error {
	return errors.New(401, UnauthorizedError_UNAUTHORIZED.String(), fmt.Sprintf(format, params...))
}

func ErrorUnauthorizedWithContext(ctx context.Context, params ...any) *errors.Error {
	if len(params) == 0 {
		return errors.New(401, UnauthorizedError_UNAUTHORIZED.String(), "")
	}
	return errors.NewWithContext(ctx, 401, UnauthorizedError_UNAUTHORIZED.String(), params)
}

func IsInvalidToken(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UnauthorizedError_INVALID_TOKEN.String() && e.Code == 401
}

func ErrorInvalidToken() *errors.Error {
	return errors.New(401, UnauthorizedError_INVALID_TOKEN.String(), "")
}

func ErrorInvalidTokenWithMessage(format string, params ...any) *errors.Error {
	return errors.New(401, UnauthorizedError_INVALID_TOKEN.String(), fmt.Sprintf(format, params...))
}

func ErrorInvalidTokenWithContext(ctx context.Context, params ...any) *errors.Error {
	if len(params) == 0 {
		return errors.New(401, UnauthorizedError_INVALID_TOKEN.String(), "")
	}
	return errors.NewWithContext(ctx, 401, UnauthorizedError_INVALID_TOKEN.String(), params)
}

func IsTokenExpired(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UnauthorizedError_TOKEN_EXPIRED.String() && e.Code == 401
}

func ErrorTokenExpired() *errors.Error {
	return errors.New(401, UnauthorizedError_TOKEN_EXPIRED.String(), "")
}

func ErrorTokenExpiredWithMessage(format string, params ...any) *errors.Error {
	return errors.New(401, UnauthorizedError_TOKEN_EXPIRED.String(), fmt.Sprintf(format, params...))
}

func ErrorTokenExpiredWithContext(ctx context.Context, params ...any) *errors.Error {
	if len(params) == 0 {
		return errors.New(401, UnauthorizedError_TOKEN_EXPIRED.String(), "")
	}
	return errors.NewWithContext(ctx, 401, UnauthorizedError_TOKEN_EXPIRED.String(), params)
}

func IsInternalServerError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ServerError_INTERNAL_SERVER_ERROR.String() && e.Code == 500
}

func ErrorInternalServerError() *errors.Error {
	return errors.New(500, ServerError_INTERNAL_SERVER_ERROR.String(), "")
}

func ErrorInternalServerErrorWithMessage(format string, params ...any) *errors.Error {
	return errors.New(500, ServerError_INTERNAL_SERVER_ERROR.String(), fmt.Sprintf(format, params...))
}

func ErrorInternalServerErrorWithContext(ctx context.Context, params ...any) *errors.Error {
	if len(params) == 0 {
		return errors.New(500, ServerError_INTERNAL_SERVER_ERROR.String(), "")
	}
	return errors.NewWithContext(ctx, 500, ServerError_INTERNAL_SERVER_ERROR.String(), params)
}
